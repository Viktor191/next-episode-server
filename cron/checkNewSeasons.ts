import cron from "node-cron";
import {tmdbApiClient} from "helpers/tmdbApiClient";
import {ShowModel} from "models/showModel";

// –ó–∞–≥–ª—É—à–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
const sendNotificationToUser = (userId: string, shows: string[]) => {
    console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –æ —Å–µ—Ä–∏–∞–ª–∞—Ö: ${shows.join(", ")}`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤
const checkForNewSeasons = async () => {
    console.log("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤...");

    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä–∏–∞–ª–æ–≤
        const favoriteShows = await ShowModel.find({type: "tv"});

        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ userId
        const userNotifications: Record<string, string[]> = {};

        const today = new Date();

        for (const show of favoriteShows) {
            const tmdbId = show.tmdbId;
            const userId = show.userId;
            const lastNotifiedSeason = show.lastNotifiedSeason ?? 0;

            try {
                const response = await tmdbApiClient.get(`/tv/${tmdbId}?language=ru-RU`);
                const showName = response.data.name;

                if (!response.data?.seasons?.length) continue;

                const seasons = response.data.seasons;
                const latestSeason = seasons[seasons.length - 1];
                const latestSeasonNumber = latestSeason?.season_number ?? 0;
                const airDate = latestSeason?.air_date ? new Date(latestSeason.air_date) : null;

                // –û–±–Ω–æ–≤–ª—è–µ–º lastNotifiedSeason, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
                if (latestSeasonNumber > lastNotifiedSeason) {
                    console.log(`üì£ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${showName}: —Å–µ–∑–æ–Ω ${latestSeasonNumber}`);

                    await ShowModel.updateMany(
                        {tmdbId},
                        {$set: {lastNotifiedSeason: latestSeasonNumber, isNotified: false}}
                    );
                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ —Å–µ–∑–æ–Ω–∞, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                if (airDate && airDate <= today && !show.isNotified && latestSeasonNumber > lastNotifiedSeason) {
                    console.log(`‚úÖ –°–µ–∑–æ–Ω ${latestSeasonNumber} —Å–µ—Ä–∏–∞–ª–∞ ${showName} —É–∂–µ –≤—ã—à–µ–ª!`);

                    await ShowModel.updateMany(
                        {tmdbId},
                        {$set: {isNotified: true}}
                    );

                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if (!userNotifications[userId]) {
                        userNotifications[userId] = [];
                    }
                    userNotifications[userId].push(showName);
                }
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ TMDb API –¥–ª—è ID ${tmdbId}:`, err);
            }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        for (const [userId, shows] of Object.entries(userNotifications)) {
            sendNotificationToUser(userId, shows);
        }
        console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    } catch (error) {
        console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:", error);
    }
};

// CRON-–∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —É—Ç—Ä–∞
cron.schedule("0 8 * * *", () => { // –¥–ª—è —Ç–µ—Å—Ç–æ–≤ "*/1 * * * *" —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, –≤ –≤–æ—Å–µ–º—å —É—Ç—Ä–∞ "0 8 * * *"
    checkForNewSeasons();
});

console.log("üïí CRON-–∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!");

// –¥–ª—è —Ç–µ—Å—Ç–æ–≤ "*/1 * * * *" —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, –∞ –≤ –≤–æ—Å–µ–º—å —É—Ç—Ä–∞ "0 8 * * *"