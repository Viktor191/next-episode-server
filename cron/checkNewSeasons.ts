import cron from "node-cron";
import {tmdbApiClient} from "helpers/tmdbApiClient"; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç TMDb API
import {ShowModel} from "models/showModel";
import * as console from "node:console"; // –ú–æ–¥–µ–ª—å —Å–µ—Ä–∏–∞–ª–æ–≤ –≤ MongoDB

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤
const checkForNewSeasons = async () => {
    console.log("üîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤...");


    try {
        // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –∏ –µ—â—ë –Ω–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã
        const favoriteShows = await ShowModel.find({type: "tv", isNotified: false});
        console.log(favoriteShows);
        for (const show of favoriteShows) {
            const tmdbId = show.tmdbId;

            try {
                // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ TMDb API, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤
                const response = await tmdbApiClient.get(`/tv/${tmdbId}?language=ru-RU`);
                console.log(`–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç TMDb –¥–ª—è —Å–µ—Ä–∏–∞–ª–∞ —Å ID ${tmdbId}:`);
                // console.log(response.data);
                if (!response.data?.seasons?.length) continue; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ–∑–æ–Ω–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω
                const lastSeason = response.data.seasons[response.data.seasons.length - 1];
                console.log(`–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω –¥–ª—è ${response.data.name}: ${lastSeason.season_number}`);
                // console.log(response.data)
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ today –∏ airDate
                const today = new Date();
                const airDate = new Date(lastSeason.air_date);
                // console.log(`–°–µ–≥–æ–¥–Ω—è: ${today}, –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞: ${airDate}`);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –µ–≥–æ –¥–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞
                if (lastSeason.air_date && airDate <= today) {
                    console.log(`üöÄ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω –¥–ª—è ${response.data.name}: ${lastSeason.season_number}!!!`);
                    await ShowModel.updateOne({tmdbId}, {$set: {isNotified: true}});
                }
            } catch (err) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ TMDb API –¥–ª—è ID ${tmdbId}:`, err);
            }
        }
    } catch (error) {
        console.error("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤:", error);
    }
};

// CRON-–∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8 —É—Ç—Ä–∞
cron.schedule("0 8 * * *", () => { // –¥–ª—è —Ç–µ—Å—Ç–æ–≤ "*/1 * * * *" —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, –∞ –≤ –≤–æ—Å–µ–º—å —É—Ç—Ä–∞ "0 8 * * *"
    checkForNewSeasons();
});

console.log("üïí CRON-–∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–µ–∑–æ–Ω–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!");