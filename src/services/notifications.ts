import {sendMail} from 'helpers/mailService';
import {UserModel} from 'models/userModel';
import {debug, warn, info, error as logError} from 'helpers/logger';

const CLIENT_URL = process.env.CLIENT_URL || 'http://localhost:5173';

export const sendNotificationToUser = async (userId: string, shows: string[]): Promise<void> => {
    const user = await UserModel.findById(userId);

    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç email –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!user?.email || user.notify === false) {
        warn(
            `–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. ` +
            `email: ${user?.email}, notify: ${user?.notify}`,
        );
        return;
    }

    const html = `
  <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5; color: #333;">
    <h2 style="color: #ee8b05;">üì¢ –ù–æ–≤–∏–Ω–∫–∏ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!</h2>
    <p>–£ –≤–∞—Å –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ª—é–±–∏–º—ã—Ö —Å–µ—Ä–∏–∞–ª–∞—Ö –∏ —Ñ–∏–ª—å–º–∞—Ö:</p>
    <ul style="padding-left: 20px; margin-top: 16px; margin-bottom: 16px;">
      ${shows
        .map(
            show => `
        <li style="margin-bottom: 8px;">
          <span style="font-weight: bold;">${show}</span>
        </li>
      `,
        )
        .join('')}
    </ul>
    <p style="margin-top: 24px;">
      üîó <a href="${CLIENT_URL}/upcoming" style="color: #ee8b05; text-decoration: none;">
        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –Ω–æ–≤–∏–Ω–æ–∫
      </a>
    </p>
    <hr style="margin-top: 32px; margin-bottom: 16px; border: none; border-top: 1px solid #ccc;" />
    <p style="font-size: 12px; color: #888;">
      –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    </p>
  </div>
`;

    info(`–ì–æ—Ç–æ–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}: ${shows.join(', ')}`);

    try {
        const result = await sendMail({
            to: user.email,
            subject: '–ù–æ–≤–∏–Ω–∫–∏ –≤ –≤–∞—à–∏—Ö —Å–µ—Ä–∏–∞–ª–∞—Ö –∏ —Ñ–∏–ª—å–º–∞—Ö!',
            html,
        });
        debug(`–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${JSON.stringify(result)}`);
        info(`Email notification sent to ${user.email}`);
    } catch (err: unknown) {
        if (err instanceof Error) {
            logError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}:`, err.message);
        } else {
            logError(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.email}:`, err);
        }
    }
};
